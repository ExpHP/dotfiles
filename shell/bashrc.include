# vim: ft=sh

# To be source'd in .bashrc

# Wrap in a function so that `local` can be used.
# Awkwardly long name to avoid collision.
doTheSpecialPromptyThing() {(  # scope the colors
  . $HOME/dotfiles/shell/colors.include

  local lbrace="$white["
  local rbrace="$white]"
  local midbrace="$white@"
  if ! [[ -z "$NOLIMIT_JUST_IN_TIME" ]]; then
    local lbrace="$red[["
    local rbrace="$red]]"
    local midbrace="$redâš¡"
  fi

  local my_machine
  local tmp
  for tmp in \
    lampam-ThinkPad-T430\
    arch-t430s\
    dd-arch\
    dd-win10\
  ; do [[ $HOSTNAME == $tmp ]] && my_machine=1; done

  # == STATIC REGION ==
  # no command substitutions may be used before the error indicator,
  # to ensure that the value of $? is preserved.
  PS1=""
  PS1+="$lbrace "
  if [[ $my_machine ]]; then
    # Username & Time
    PS1+="$blue\\u"
    PS1+="$bracecolor $midbrace "
    if [[ $EXPHP_BASHRC_PRIVATE ]]; then
      PS1+="$purple\t"
    else
      PS1+="$yellow\t"
    fi
  else
    # Username & host
    PS1+="$green\\u@\\h"
  fi
  PS1+=" $rbrace "

  # == ERROR INDICATOR ==
  PS1+="\$(if [[ \$? != 0 ]];"
  PS1+="then echo \"($red!!!$white) \"; "
  PS1+="fi)"

  # == DYNAMIC REGION ==
  PS1+="\$(
    \$HOME/dotfiles/shell/bashrc.prompt.d/pyenv
    \$HOME/dotfiles/shell/bashrc.prompt.d/git
  )"

  # Current directory
  PS1+="$green\w$none"

  # Prompt on newline
  PS1+="\n"
  PS1+="${white}\\\$${none} "
  echo "$PS1"  # let it escape the subshell
)}

PS1=$(doTheSpecialPromptyThing)

# cleanup
unset -f doTheSpecialPromptyThing

__bashrc__is_bash_ge() {
    local maj
    local arg=$1
    for maj in $(seq 1 1 $((arg - 1))); do
        [[ $BASH_VERSION == ${maj}.* ]] && return 1
    done
    return 0
}

__bashrc__is_bash_ge 4 && shopt -s globstar
__bashrc__is_bash_ge 3 && shopt -s extglob

__bashrc__is_bash_ge 4 && shopt -s autocd

# so readline has a vim mode
__bashrc__is_bash_ge 3 && set -o vi

#------------------------------------------------------
# replicate zsh's inc_append_history. Or at least, try to.

if [[ $EXPHP_BASHRC_PRIVATE ]]; then
    # use a temporary history file so that we can still see old commands,
    #  but can't write back new ones
    p=$(mktemp /tmp/tmp.XXXXXXXXXX)
    cat $HISTFILE >>$p
    HISTFILE=$p
else
    export HISTCONTROL=ignoredups:erasedups
    # "like, infinity"
    export HISTSIZE=100000000
    export HISTFILESIZE=100000000
    shopt -s histappend

    # Add to the history after each command finishes
    NEWLINE=$'\n'
    PROMPT_COMMAND="history -a $NEWLINE $PROMPT_COMMAND"
fi
