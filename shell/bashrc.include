# vim: ft=sh

# To be source'd in .bashrc

# running 'which' can actually get pretty expensive (especially on wsl2) so we cache these
which git 1>/dev/null 2>/dev/null && __EXPHP_BASH_PROMPT__HAS_GIT=1
[[ -e $HOME/asd/manage/pyenv ]] && __EXPHP_BASH_PROMPT__HAS_PYENV=1

# Wrap in a function so that `local` can be used.
# Awkwardly long name to avoid collision.
__exphpBashrcPromptCommand() {
  local __PREV_EXIT_CODE="$?" # This needs to be first

  . $HOME/dotfiles/shell/colors.ps1.include --local

  local lbrace="$white["
  local rbrace="$white]"
  local midbrace="$white@"
  if ! [[ -z "$NOLIMIT_JUST_IN_TIME" ]]; then
    local lbrace="$red[["
    local rbrace="$red]]"
    local midbrace="$redâš¡"
  fi

  # Only put fancy prompts on my own machines.
  local my_machine
  local tmp
  for tmp in $(cat "$HOME/dotfiles/shell/my_machines"); do
    [[ $HOSTNAME == $tmp ]] && my_machine=1;
  done

  # == RESET ==
  PS1=""

  # == PYENV ==
  if [[ $__EXPHP_BASH_PROMPT__HAS_PYENV ]]; then
    PS1+="$($HOME/dotfiles/shell/bashrc.prompt.d/pyenv)"
  fi

  # == MAIN STUFF ==
  PS1+="$lbrace "
  if [[ $my_machine ]]; then
    # Username & Time
    PS1+="$blue\\u"
    PS1+="$bracecolor $midbrace "
    if [[ $EXPHP_BASHRC_PRIVATE ]]; then
      PS1+="$purple\t"
    else
      PS1+="$yellow\t"
    fi
  else
    # Username & host
    PS1+="$green\\u@\\h"
  fi
  PS1+=" $rbrace "

  # == ERROR INDICATOR ==
  if [[ $__PREV_EXIT_CODE -ne 0  ]]; then
    PS1+="($red!!!$white) "
  fi

  # == DYNAMIC REGION ==
  # Git branch
  if [[ $__EXPHP_BASH_PROMPT__HAS_GIT ]]; then
    PS1+="$($HOME/dotfiles/shell/bashrc.prompt.d/git)"
  fi

  # Current directory
  PS1+="$green\w$none"

  # Prompt on newline
  PS1+="\n"
  PS1+="${white}\\\$${none} "
}

PROMPT_COMMAND=__exphpBashrcPromptCommand

__bashrc__is_bash_ge() {
    local maj
    local arg=$1
    for maj in $(seq 1 1 $((arg - 1))); do
        [[ $BASH_VERSION == ${maj}.* ]] && return 1
    done
    return 0
}

__bashrc__is_bash_ge 4 && shopt -s globstar
__bashrc__is_bash_ge 3 && shopt -s extglob

__bashrc__is_bash_ge 4 && shopt -s autocd

# so readline has a vim mode
__bashrc__is_bash_ge 3 && set -o vi

#------------------------------------------------------
# replicate zsh's inc_append_history. Or at least, try to.

if [[ $EXPHP_BASHRC_PRIVATE ]]; then
    # use a temporary history file so that we can still see old commands,
    #  but can't write back new ones
    p=$(mktemp /tmp/tmp.XXXXXXXXXX)
    cat $HISTFILE >>$p
    HISTFILE=$p
else
    export HISTCONTROL=ignoredups:erasedups
    # "like, infinity"
    export HISTSIZE=100000000
    export HISTFILESIZE=100000000
    shopt -s histappend

    # Add to the history after each command finishes
    NEWLINE=$'\n'
    PROMPT_COMMAND="$PROMPT_COMMAND $NEWLINE history -a"

    # absolutely guarantee i never lose my bash history ever again ever ever
    __bashrc__history_backup_counter=0
    __bashrc__MAKE_ABSOLUTELY_SURE_THAT_FUCKING_HISTORY_IS_SAVED() {
        local backup=$HISTFILE.bak
        # Only perform backups once every few commands.
        # (This will make it easier to see whether the wc -l's here are a problem)
        local interval=5

        __bashrc__history_backup_counter=$((__bashrc__history_backup_counter + 1))
        if [[ $__bashrc__history_backup_counter -eq $interval ]]; then
            local new_count=$(cat "$HISTFILE" 2>/dev/null | wc -l)
            local old_count=$(cat "$backup" 2>/dev/null | wc -l)
            if [[ $new_count -lt $old_count ]]; then
                echo >&2 "WARNING: Detected loss of lines in $HISTFILE ($old_count -> $new_count lines), history from this session will not be backed up"
                \cp -a $backup $HISTFILE
            else
                \cp -a $HISTFILE $backup
            fi
            __bashrc__history_backup_counter=0
        fi
    }
    PROMPT_COMMAND="$PROMPT_COMMAND $NEWLINE __bashrc__MAKE_ABSOLUTELY_SURE_THAT_FUCKING_HISTORY_IS_SAVED"
fi

#------------------------------------------------------

__bashrc__remove_from_path() {
    directory_to_remove=$1
    PATH=:$PATH:
    PATH=${PATH//:$directory_to_remove:/:}
    PATH=${PATH#:}; PATH=${PATH%:}
}

if [ -e $HOME/anaconda3 ]; then
    conda_startup() {
        # This is the stuff that `conda init` normally adds to .bashrc, except it has been put
        # into a function so that you can opt into it on a per-shell basis.
        __conda_setup="$("$HOME/anaconda3/bin/conda" 'shell.bash' 'hook' 2> /dev/null)"
        if [ $? -eq 0 ]; then
            eval "$__conda_setup"
        else
            if [ -f "$HOME/anaconda3/etc/profile.d/conda.sh" ]; then
                . "$HOME/anaconda3/etc/profile.d/conda.sh"
            else
                export PATH="$HOME/anaconda3/bin:$PATH"
            fi
        fi
        unset __conda_setup
        # <<< conda initialize <<<
    }
fi

