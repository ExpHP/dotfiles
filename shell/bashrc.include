# vim: ft=sh

# To be source'd in .bashrc

# Wrap in a function so that `local` can be used.
# Awkwardly long name to avoid collision.
doTheSpecialPromptyThing() {
  local none='\[\033[00m\]'
  local bold='\[\033[01m\]'
  local red='\[\033[01;31m\]'
  local green='\[\033[01;32m\]'
  local yellow='\[\033[01;33m\]'
  local blue='\[\033[01;34m\]'
  local purple='\[\033[01;35m\]'
  local cyan='\[\033[01;36m\]'
  local white='\[\033[01;37m\]'

  local lbrace="$white["
  local rbrace="$white]"
  local midbrace="$white@"
  if ! [[ -z "$NOLIMIT_JUST_IN_TIME" ]]; then
    local lbrace="$red[["
    local rbrace="$red]]"
    local midbrace="$red⚡"
  fi
  local gitgud=
  if which git >/dev/null; then
     gitgud=1
  fi



  # == STATIC REGION ==
  # no command substitutions may be used before the error indicator,
  # to ensure that the value of $? is preserved.
  PS1=""
  PS1+="$lbrace "
  if [[ "$HOSTNAME" == lampam-ThinkPad-T430 || $HOSTNAME == arch-t430s ]]; then
    # Username & Time
    PS1+="$blue\\u"
    PS1+="$bracecolor $midbrace "
    if [[ $EXPHP_BASHRC_PRIVATE ]]; then
      PS1+="$purple\t"
    else
      PS1+="$yellow\t"
    fi
  else
    # Username & host
    PS1+="$green\\u@\\h"
  fi
  PS1+=" $rbrace "

  # == ERROR INDICATOR ==
  PS1+="\$(if [[ \$? != 0 ]];"
  PS1+="then echo \"($red!!!$white) \"; "
  PS1+="fi)"

  # == DYNAMIC REGION ==
  # Git branch
  if which git >/dev/null; then
    PS1+="\$(
      . \$HOME/dotfiles/shell/gittool.ps1.include
      if [[ \$EXPHP_GITTOOL_BRANCH ]]; then
        echo -n \"$none(\"

        if [[ \$EXPHP_GITTOOL_IS_BARE ]]; then
          echo -n \"${cyan}bare\"
        elif [[ \$EXPHP_GITTOOL_IS_DIRTY ]]; then
          echo -n \"$yellow\$EXPHP_GITTOOL_BRANCH\"
        else
          echo -n \"$green\$EXPHP_GITTOOL_BRANCH\"
        fi

        echo -n \"$none\"
        if   [[ \$EXPHP_GITTOOL_UNTRACKED -gt 0 ]]; then
          echo -n \" •\$EXPHP_GITTOOL_UNTRACKED\"
        fi

        if [[ \$EXPHP_GITTOOL_DELETIONS -gt 0 ]]; then
          echo -n \" ${red}-\$EXPHP_GITTOOL_DELETIONS\"
        fi
        if [[ \$EXPHP_GITTOOL_ADDITIONS -gt 0 ]]; then
          echo -n \" $green+\$EXPHP_GITTOOL_ADDITIONS\"
        fi
        echo -n \"$none) \"
      fi
  )"
  fi

  # Current directory
  PS1+="$green\w$none"

  # Prompt on newline
  PS1+="\n"
  PS1+="${white}\\\$${none} "
}

doTheSpecialPromptyThing

# cleanup
unset -f doTheSpecialPromptyThing

shopt -s globstar
shopt -s extglob
#shopt -s failglob  # Wrecks with some tab-completions...

shopt -s autocd

# so readline has a vim mode
set -o vi

#------------------------------------------------------
# replicate zsh's inc_append_history. Or at least, try to.

if [[ $EXPHP_BASHRC_PRIVATE ]]; then
    # use a temporary history file so that we can still see old commands,
    #  but can't write back new ones
    p=$(mktemp /tmp/tmp.XXXXXXXXXX)
    cat $HISTFILE >>$p
    HISTFILE=$p
else
    export HISTCONTROL=ignoredups:erasedups
    # "like, infinity"
    export HISTSIZE=100000000
    export HISTFILESIZE=100000000
    shopt -s histappend

    # Add to the history after each command finishes
    NEWLINE=$'\n'
    PROMPT_COMMAND="history -a $NEWLINE $PROMPT_COMMAND"
fi
