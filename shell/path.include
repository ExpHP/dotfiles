#!/usr/bin/env sh
# vim: ft=sh

# path.include
# PATH modifications aren't something I want to limit to just interactive shell prompts.
# This file is suitable for linkage into $XDG_CONFIG_HOME/plasma-workspace/env/.

export PATH
export LIBRARY_PATH
export LD_LIBRARY_PATH
export C_INCLUDE_PATH
export PKG_CONFIG_PATH
export MANPATH

# this might already be there, but it also might not.
# doesn't hurt to have it listed twice!
PATH=$HOME/bin:$PATH

# Sometimes rustup adds this, sometimes it has other things on its mind
PATH=$HOME/.cargo/bin:$PATH

# ayup
PATH=$HOME/.local/bin:$PATH
LIBRARY_PATH=$HOME/.local/lib:$LIBRARY_PATH
LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH
C_INCLUDE_PATH=$HOME/.local/include:$C_INCLUDE_PATH
PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH
MANPATH=$HOME/.local/share/man:$MANPATH

# binaries distributed inside haskell packages
# (FIXME: why is the one prepended while the rest are appended? accidental or deliberate?)
PATH=$PATH:$HOME/.cabal/bin

# FIXME uhh... what to do about the version number?
PATH=$HOME/.gem/ruby/2.4.0/bin/:$PATH

# Newer ghc versions:
#   sudo add-apt-repository https://launchpad.net/~hvr/+archive/ubuntu/ghc
PATH=/opt/ghc/bin:$PATH

# cross compiler install location
# NOTE: don't get your hopes up, I've still yet to successfully make one that can
#  actually produce an executable.
PATH=/opt/cross/bin:$PATH

# Binaries in this repo!
PATH=$HOME/dotfiles/bin:$PATH

# utility scripts for code that gets transferred to supercomputers.
PATH=$HOME/syncbin:$PATH

# arch linux doesn't search this path for binaries
which pacman 2>/dev/null 1>/dev/null && PATH=/usr/bin/core_perl:$PATH

# new idea: automatically source files named `env` located at the top of
#           an `/opt/` subdirectory
for __pathrc_tmp_path in /opt/*/env; do
    if [[ -x $__pathrc_tmp_path ]]; then # in case of evil no-match bash glob
        source "$__pathrc_tmp_path"
    fi
done

#----------------------------------------------

# ensure no empty components are in PATH-like vars,
# because POSIX defines these as equivalent to '.',
# because POSIX hates you.

# Also remove duplicate entries if the rust bin is available.
__pathrc__has_canonicalize_script() {
    which canonicalize-pathvar >/dev/null 2>&1 || return 1
    canonicalize-pathvar --remove-empty "a" >/dev/null 2>&1 || return 1
}

# despite the manpage saying "use POSIX -E for portability", some versions
# of gnu sed don't support that flag, and you must use -r
__pathrc__find_sed_E() {
    { echo a | sed -E s/a/a/ >/dev/null 2>/dev/null; } && { echo "-E"; return 0; }
    { echo a | sed -r s/a/a/ >/dev/null 2>/dev/null; } && { echo "-r"; return 0; }
    return 1
}

__pathrc__sed_E=$(__pathrc__find_sed_E) && {
    __pathrc__canonicalize() {
        if __pathrc__has_canonicalize_script; then
            canonicalize-pathvar --remove-empty -- "$*"
        else
            echo "$*" | sed $__pathrc__sed_E -e 's/^:*//' -e 's/:*$//' -e 's/:+/:/g'
        fi
    }
    PATH=$(__pathrc__canonicalize "$PATH")
    LIBRARY_PATH=$(__pathrc__canonicalize "$LIBRARY_PATH")
    LD_LIBRARY_PATH=$(__pathrc__canonicalize "$LD_LIBRARY_PATH")
    C_INCLUDE_PATH=$(__pathrc__canonicalize "$C_INCLUDE_PATH")
    PKG_CONFIG_PATH=$(__pathrc__canonicalize "$PKG_CONFIG_PATH")
    unset -f __pathrc__canonicalize

    # For MANPATH, we want to keep empty directories
    __pathrc__canonicalize() {
        if __pathrc__has_canonicalize_script; then
            canonicalize-pathvar -- "$*"
        else
            echo "$*"
        fi
    }
    MANPATH=$(__pathrc__canonicalize "$MANPATH")
    unset -f __pathrc__canonicalize
}
unset -f __pathrc__has_canonicalize_script
unset -f __pathrc__find_sed_E
unset __pathrc__sed_E

