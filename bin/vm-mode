#!/bin/bash

# 2017
# vm-mode:  Disable various personal customizations for the professor

# all in a function to minimize impact on environment vars and to
# guarantee that "return" works. (a sourced script must not use 'exit'!)
__vm_mode__impl() {
	if [[ "$0" != "bash" ]]; then
		echo "This script should be sourced instead"
		return 1
	fi

	local temp=`getopt -o h -- "$@"`
	if [ $? != 0 ] ; then echo >&2 "Terminating..." ; return 1 ; fi
	eval set -- "$temp"
	while true ; do
		case "$1" in
			-h) shift; echo >&2 "usage: vm-mode [vm|ml]"; return 1;;
			--) shift; break;;
			*) echo >&2 "We dun goofed! qHoEiEKvLe"; return 1;;
		esac
	done

	local mode=""
	while [[ $1 ]] ; do
		case "$1" in
			ml|vm) mode=$1;;
			*) echo >&2 "Bad argument: '$1'"; return 1;;
		esac
		shift
	done
	# bah, forget about alternating modes just now; they're a horrible idea
	# since some changes are console-local and others are more at a global level.
	# Let's just always require a mode to be specified.
	if ! [[ $mode ]]; then
		echo >&2 "Please specify a mode (vm, ml)."
		return 1
	fi

	local ml_dot_emacs=$(readlink -f "$HOME/.emacs.spacemacs.d")
	local vm_dot_emacs=$(readlink -f "$HOME/.emacs.standard.d")

	local cur_dot_emacs=$(readlink -f $HOME/.emacs.d)

	case "$mode" in
		ml) echo "== Entering ML mode ==";;
		vm) echo "== Entering VM mode ==";;
		*)  echo >&2 "We dun goofed! Fa4D2mSXlD"; return 1;;
	esac

	case "$mode" in
		ml) echo "Readline mode: vi";
		    set -o vi || return 1;
		;;
		vm) echo "Readline mode: emacs";
		    set -o emacs || return 1;
		;;
	esac

	# kill existing symlink
	[[ -L $HOME/.emacs.d ]] && { /bin/rm -f $HOME/.emacs.d || return 1; }
	if [[ -e $HOME/.emacs.d ]]; then
		echo "emacs: (not a symlink!)";
	else
		case "$mode" in
			ml) echo "emacs: spacemacs";
			    ln -s $ml_dot_emacs $HOME/.emacs.d || return 1;
			;;
			vm) echo "emacs: normal";
			    ln -s $vm_dot_emacs $HOME/.emacs.d || return 1;
			;;
		esac
	fi

	declare -A choice
	local prefix suffix
	case "$(__vm_mode__guess_touchpad_method)" in
		xinput)
			prefix=(xinput)
			choice[ml]=disable
			choice[vm]=enable
			suffix=('SynPS/2 Synaptics TouchPad')
			;;
		gsettings)
			prefix=(gsettings set)
			prefix+=(org.gnome.desktop.peripherals.touchpad) # schema
			prefix+=(send-events) # key
			choice[ml]=disabled
			choice[vm]=enabled
			suffix=()
			;;
		*)  echo >&2 "We dun goofed! WF4gjiof"; return 1;;
	esac
	case "$mode" in
		ml) echo "touchpad: off"; ;;
		vm) echo "touchpad: on"; ;;
	esac
	"${prefix[@]}" "${choice[$mode]}" "${suffix[@]}" || return 1;

	case "$mode" in
		ml) echo "Ctrl+Fn: flipped";;
		vm) echo "Ctrl+Fn: still flipped (sorry)";;
	esac
}

__vm_mode__guess_touchpad_method() {
	# In ubuntu there seems to be some background service that periodically checks
	#  a setting in gsettings and forcibly enables/disables the touchpad, preventing
	#  us from reliably controlling it via xinput.
	# Since I'm not sure what the culprit is, the following is just a heuristic to guess
	#  if we're in such an affected environment.

	# The following dconf path is populated on ubuntu, but not on Arch + KDE Plasma:
	if which dconf >/dev/null 2>/dev/null \
	&& [[ $(dconf dump /org/gnome/desktop/wm/keybindings/) ]]; then
		echo gsettings
	else
		echo xinput
	fi
}

__vm_mode__impl "$@"

